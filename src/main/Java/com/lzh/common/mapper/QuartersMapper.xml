<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lzh.common.mapper.QuartersMapper" >
  <resultMap id="BaseResultMap" type="com.lzh.common.entity.Quarters" >
    <id column="qid" property="qid" jdbcType="INTEGER" />
    <result column="eid" property="eid" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="VARCHAR" />
    <result column="quality" property="quality" jdbcType="VARCHAR" />
    <result column="region" property="region" jdbcType="VARCHAR" />
    <result column="lsalary" property="lsalary" jdbcType="INTEGER" />
    <result column="msalary" property="msalary" jdbcType="INTEGER" />
    <result column="endtime" property="endtime" jdbcType="TIMESTAMP" />
    <result column="num" property="num" jdbcType="INTEGER" />
    <result column="experience" property="experience" jdbcType="VARCHAR" />
    <result column="edu" property="edu" jdbcType="VARCHAR" />
    <result column="synopsis" property="synopsis" jdbcType="VARCHAR" />
    <result column="checkstate" property="checkstate" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    qid, eid, name, type, quality, region, lsalary, msalary, endtime, num, experience, 
    edu, synopsis, checkstate
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.lzh.common.entity.QuartersExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from quarters
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from quarters
    where qid = #{qid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from quarters
    where qid = #{qid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lzh.common.entity.QuartersExample" >
    delete from quarters
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lzh.common.entity.Quarters" >
    insert into quarters (qid, eid, name, 
      type, quality, region, 
      lsalary, msalary, endtime, 
      num, experience, edu, 
      synopsis, checkstate)
    values (#{qid,jdbcType=INTEGER}, #{eid,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, 
      #{type,jdbcType=VARCHAR}, #{quality,jdbcType=VARCHAR}, #{region,jdbcType=VARCHAR}, 
      #{lsalary,jdbcType=INTEGER}, #{msalary,jdbcType=INTEGER}, #{endtime,jdbcType=TIMESTAMP}, 
      #{num,jdbcType=INTEGER}, #{experience,jdbcType=VARCHAR}, #{edu,jdbcType=VARCHAR}, 
      #{synopsis,jdbcType=VARCHAR}, #{checkstate,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.lzh.common.entity.Quarters" >
    insert into quarters
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="qid != null" >
        qid,
      </if>
      <if test="eid != null" >
        eid,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="quality != null" >
        quality,
      </if>
      <if test="region != null" >
        region,
      </if>
      <if test="lsalary != null" >
        lsalary,
      </if>
      <if test="msalary != null" >
        msalary,
      </if>
      <if test="endtime != null" >
        endtime,
      </if>
      <if test="num != null" >
        num,
      </if>
      <if test="experience != null" >
        experience,
      </if>
      <if test="edu != null" >
        edu,
      </if>
      <if test="synopsis != null" >
        synopsis,
      </if>
      <if test="checkstate != null" >
        checkstate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="qid != null" >
        #{qid,jdbcType=INTEGER},
      </if>
      <if test="eid != null" >
        #{eid,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="quality != null" >
        #{quality,jdbcType=VARCHAR},
      </if>
      <if test="region != null" >
        #{region,jdbcType=VARCHAR},
      </if>
      <if test="lsalary != null" >
        #{lsalary,jdbcType=INTEGER},
      </if>
      <if test="msalary != null" >
        #{msalary,jdbcType=INTEGER},
      </if>
      <if test="endtime != null" >
        #{endtime,jdbcType=TIMESTAMP},
      </if>
      <if test="num != null" >
        #{num,jdbcType=INTEGER},
      </if>
      <if test="experience != null" >
        #{experience,jdbcType=VARCHAR},
      </if>
      <if test="edu != null" >
        #{edu,jdbcType=VARCHAR},
      </if>
      <if test="synopsis != null" >
        #{synopsis,jdbcType=VARCHAR},
      </if>
      <if test="checkstate != null" >
        #{checkstate,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lzh.common.entity.QuartersExample" resultType="java.lang.Integer" >
    select count(*) from quarters
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update quarters
    <set >
      <if test="record.qid != null" >
        qid = #{record.qid,jdbcType=INTEGER},
      </if>
      <if test="record.eid != null" >
        eid = #{record.eid,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.quality != null" >
        quality = #{record.quality,jdbcType=VARCHAR},
      </if>
      <if test="record.region != null" >
        region = #{record.region,jdbcType=VARCHAR},
      </if>
      <if test="record.lsalary != null" >
        lsalary = #{record.lsalary,jdbcType=INTEGER},
      </if>
      <if test="record.msalary != null" >
        msalary = #{record.msalary,jdbcType=INTEGER},
      </if>
      <if test="record.endtime != null" >
        endtime = #{record.endtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.num != null" >
        num = #{record.num,jdbcType=INTEGER},
      </if>
      <if test="record.experience != null" >
        experience = #{record.experience,jdbcType=VARCHAR},
      </if>
      <if test="record.edu != null" >
        edu = #{record.edu,jdbcType=VARCHAR},
      </if>
      <if test="record.synopsis != null" >
        synopsis = #{record.synopsis,jdbcType=VARCHAR},
      </if>
      <if test="record.checkstate != null" >
        checkstate = #{record.checkstate,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update quarters
    set qid = #{record.qid,jdbcType=INTEGER},
      eid = #{record.eid,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=VARCHAR},
      quality = #{record.quality,jdbcType=VARCHAR},
      region = #{record.region,jdbcType=VARCHAR},
      lsalary = #{record.lsalary,jdbcType=INTEGER},
      msalary = #{record.msalary,jdbcType=INTEGER},
      endtime = #{record.endtime,jdbcType=TIMESTAMP},
      num = #{record.num,jdbcType=INTEGER},
      experience = #{record.experience,jdbcType=VARCHAR},
      edu = #{record.edu,jdbcType=VARCHAR},
      synopsis = #{record.synopsis,jdbcType=VARCHAR},
      checkstate = #{record.checkstate,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lzh.common.entity.Quarters" >
    update quarters
    <set >
      <if test="eid != null" >
        eid = #{eid,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="quality != null" >
        quality = #{quality,jdbcType=VARCHAR},
      </if>
      <if test="region != null" >
        region = #{region,jdbcType=VARCHAR},
      </if>
      <if test="lsalary != null" >
        lsalary = #{lsalary,jdbcType=INTEGER},
      </if>
      <if test="msalary != null" >
        msalary = #{msalary,jdbcType=INTEGER},
      </if>
      <if test="endtime != null" >
        endtime = #{endtime,jdbcType=TIMESTAMP},
      </if>
      <if test="num != null" >
        num = #{num,jdbcType=INTEGER},
      </if>
      <if test="experience != null" >
        experience = #{experience,jdbcType=VARCHAR},
      </if>
      <if test="edu != null" >
        edu = #{edu,jdbcType=VARCHAR},
      </if>
      <if test="synopsis != null" >
        synopsis = #{synopsis,jdbcType=VARCHAR},
      </if>
      <if test="checkstate != null" >
        checkstate = #{checkstate,jdbcType=INTEGER},
      </if>
    </set>
    where qid = #{qid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lzh.common.entity.Quarters" >
    update quarters
    set eid = #{eid,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      quality = #{quality,jdbcType=VARCHAR},
      region = #{region,jdbcType=VARCHAR},
      lsalary = #{lsalary,jdbcType=INTEGER},
      msalary = #{msalary,jdbcType=INTEGER},
      endtime = #{endtime,jdbcType=TIMESTAMP},
      num = #{num,jdbcType=INTEGER},
      experience = #{experience,jdbcType=VARCHAR},
      edu = #{edu,jdbcType=VARCHAR},
      synopsis = #{synopsis,jdbcType=VARCHAR},
      checkstate = #{checkstate,jdbcType=INTEGER}
    where qid = #{qid,jdbcType=INTEGER}
  </update>
</mapper>