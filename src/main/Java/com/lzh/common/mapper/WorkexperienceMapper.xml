<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lzh.common.mapper.WorkexperienceMapper" >
  <resultMap id="BaseResultMap" type="com.lzh.common.entity.Workexperience" >
    <id column="aid" property="aid" jdbcType="INTEGER" />
    <result column="begintime" property="begintime" jdbcType="TIMESTAMP" />
    <result column="endtime" property="endtime" jdbcType="TIMESTAMP" />
    <result column="organization" property="organization" jdbcType="VARCHAR" />
    <result column="trade" property="trade" jdbcType="VARCHAR" />
    <result column="department" property="department" jdbcType="VARCHAR" />
    <result column="job" property="job" jdbcType="VARCHAR" />
    <result column="synopsis" property="synopsis" jdbcType="VARCHAR" />
    <result column="checkstate" property="checkstate" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    aid, begintime, endtime, organization, trade, department, job, synopsis, checkstate
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.lzh.common.entity.WorkexperienceExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from workexperience
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from workexperience
    where aid = #{aid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from workexperience
    where aid = #{aid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lzh.common.entity.WorkexperienceExample" >
    delete from workexperience
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lzh.common.entity.Workexperience" >
    insert into workexperience (aid, begintime, endtime, 
      organization, trade, department, 
      job, synopsis, checkstate
      )
    values (#{aid,jdbcType=INTEGER}, #{begintime,jdbcType=TIMESTAMP}, #{endtime,jdbcType=TIMESTAMP}, 
      #{organization,jdbcType=VARCHAR}, #{trade,jdbcType=VARCHAR}, #{department,jdbcType=VARCHAR}, 
      #{job,jdbcType=VARCHAR}, #{synopsis,jdbcType=VARCHAR}, #{checkstate,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.lzh.common.entity.Workexperience" >
    insert into workexperience
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="aid != null" >
        aid,
      </if>
      <if test="begintime != null" >
        begintime,
      </if>
      <if test="endtime != null" >
        endtime,
      </if>
      <if test="organization != null" >
        organization,
      </if>
      <if test="trade != null" >
        trade,
      </if>
      <if test="department != null" >
        department,
      </if>
      <if test="job != null" >
        job,
      </if>
      <if test="synopsis != null" >
        synopsis,
      </if>
      <if test="checkstate != null" >
        checkstate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="aid != null" >
        #{aid,jdbcType=INTEGER},
      </if>
      <if test="begintime != null" >
        #{begintime,jdbcType=TIMESTAMP},
      </if>
      <if test="endtime != null" >
        #{endtime,jdbcType=TIMESTAMP},
      </if>
      <if test="organization != null" >
        #{organization,jdbcType=VARCHAR},
      </if>
      <if test="trade != null" >
        #{trade,jdbcType=VARCHAR},
      </if>
      <if test="department != null" >
        #{department,jdbcType=VARCHAR},
      </if>
      <if test="job != null" >
        #{job,jdbcType=VARCHAR},
      </if>
      <if test="synopsis != null" >
        #{synopsis,jdbcType=VARCHAR},
      </if>
      <if test="checkstate != null" >
        #{checkstate,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lzh.common.entity.WorkexperienceExample" resultType="java.lang.Integer" >
    select count(*) from workexperience
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update workexperience
    <set >
      <if test="record.aid != null" >
        aid = #{record.aid,jdbcType=INTEGER},
      </if>
      <if test="record.begintime != null" >
        begintime = #{record.begintime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endtime != null" >
        endtime = #{record.endtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.organization != null" >
        organization = #{record.organization,jdbcType=VARCHAR},
      </if>
      <if test="record.trade != null" >
        trade = #{record.trade,jdbcType=VARCHAR},
      </if>
      <if test="record.department != null" >
        department = #{record.department,jdbcType=VARCHAR},
      </if>
      <if test="record.job != null" >
        job = #{record.job,jdbcType=VARCHAR},
      </if>
      <if test="record.synopsis != null" >
        synopsis = #{record.synopsis,jdbcType=VARCHAR},
      </if>
      <if test="record.checkstate != null" >
        checkstate = #{record.checkstate,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update workexperience
    set aid = #{record.aid,jdbcType=INTEGER},
      begintime = #{record.begintime,jdbcType=TIMESTAMP},
      endtime = #{record.endtime,jdbcType=TIMESTAMP},
      organization = #{record.organization,jdbcType=VARCHAR},
      trade = #{record.trade,jdbcType=VARCHAR},
      department = #{record.department,jdbcType=VARCHAR},
      job = #{record.job,jdbcType=VARCHAR},
      synopsis = #{record.synopsis,jdbcType=VARCHAR},
      checkstate = #{record.checkstate,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lzh.common.entity.Workexperience" >
    update workexperience
    <set >
      <if test="begintime != null" >
        begintime = #{begintime,jdbcType=TIMESTAMP},
      </if>
      <if test="endtime != null" >
        endtime = #{endtime,jdbcType=TIMESTAMP},
      </if>
      <if test="organization != null" >
        organization = #{organization,jdbcType=VARCHAR},
      </if>
      <if test="trade != null" >
        trade = #{trade,jdbcType=VARCHAR},
      </if>
      <if test="department != null" >
        department = #{department,jdbcType=VARCHAR},
      </if>
      <if test="job != null" >
        job = #{job,jdbcType=VARCHAR},
      </if>
      <if test="synopsis != null" >
        synopsis = #{synopsis,jdbcType=VARCHAR},
      </if>
      <if test="checkstate != null" >
        checkstate = #{checkstate,jdbcType=INTEGER},
      </if>
    </set>
    where aid = #{aid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lzh.common.entity.Workexperience" >
    update workexperience
    set begintime = #{begintime,jdbcType=TIMESTAMP},
      endtime = #{endtime,jdbcType=TIMESTAMP},
      organization = #{organization,jdbcType=VARCHAR},
      trade = #{trade,jdbcType=VARCHAR},
      department = #{department,jdbcType=VARCHAR},
      job = #{job,jdbcType=VARCHAR},
      synopsis = #{synopsis,jdbcType=VARCHAR},
      checkstate = #{checkstate,jdbcType=INTEGER}
    where aid = #{aid,jdbcType=INTEGER}
  </update>
</mapper>